; 実行ファイル作成機能

#module m_ginger_sub_build

#define true 1
#define false 0

; 実行ファイルを生成する
#enum build_format_exe = 1
; オブジェクトファイルを生成する
#enum build_format_ax
; プリプロセス中間ファイルを生成する
#enum build_format_pp

; build コマンドのエントリーポイント
;
; 成功したら stat=true
#deffunc ginger_sub_build_main var args, int argc, int show_help, var error

	sdim s_src_path
	s_src_path_exists = false

	s_build_format = build_format_exe

	if show_help {
		ginger_sub_help_main args, argc, show_help, error
		return stat
	}

	ginger_sub_build_parse_args args, argc, error
	if stat == false {
		return false
	}

	ginger_sub_build_run error
	return stat

; 引数を解析する
;
; 成功したら stat=true
#deffunc ginger_sub_build_parse_args array args, int argc, var error, \
	local i, local ok

	ok = true

	repeat
		if i >= argc {
			break
		}

		if args(i) == "--" {
			break
		}

		if args(i) == "--ax" {
			s_build_format = build_format_ax
			i++
			continue
		}

		if args(i) == "--pp" {
			s_build_format = build_format_pp
			i++
			continue
		}

		if s_src_path_exists == false {
			s_src_path = args(i)
			s_src_path_exists = true
			i++
			continue
		}

		error = "不明な引数: " + args(i)
		ok = false
		break
	loop

	if ok == false {
		return false
	}

	if s_src_path_exists == false {
		error = "スクリプトファイルを指定してください。"
		return false
	}

	return true

; プリプロセスを行う
;
; 成功したら stat=true
#deffunc ginger_sub_build_preprocess var error, \
	local hsp_dir, local src_dir, local hsptmp_text, local hsptmp_path, \
	local ref_name, local message

	strrep s_src_path, "\\", "/"
	src_dir = getpath(s_src_path, getpath_dir)

	hsptmp_path = "hsptmp"
	hsptmp_text = "#cmpopt ppout 1\n#include \"" + s_src_path + "\""

	; ppout を設定するための hsptmp を生成する。
	notesel hsptmp_text
	notesave hsptmp_path
	noteunsel

	; ref_name を再設定する。
	ginger_args_get_ref_name ref_name
	if stat == false {
		ref_name = getpath(getpath(s_src_path, getpath_no_ext), getpath_basename)
	}

	; プリプロセスを行う。
	ginger_compile_set_pp_only true

	ginger_compile_get_hsp_dir hsp_dir
	if stat == false {
		error = "HSP のインストールディレクトリを指定してください。"
		return false
	}

	ginger_compile_compile hsptmp_path
	if stat == false {
		ginger_compile_get_message error
		return false
	}

	ginger_compile_get_message message

	ginger_infra_stdout message
	return true

; ビルドを行う
;
; 成功したら stat=true
#deffunc ginger_sub_build_run var error, \
	local hsp_dir, local runtime_name, local runtime_dir, local message

	if s_build_format == build_format_pp {
		ginger_sub_build_preprocess error
		return stat
	}

	if s_build_format == build_format_exe {
		ginger_compile_does_make true
	}

	ginger_compile_get_hsp_dir hsp_dir
	if stat == false {
		error = "HSP のインストールディレクトリを指定してください。"
		return false
	}

	ginger_compile_compile s_src_path
	if stat == false {
		ginger_compile_get_message error
		return false
	}

	ginger_compile_get_message message

	ginger_compile_get_runtime_name runtime_name

	message += "#Use runtime \"" + runtime_name + "\"\n"

	if s_build_format == build_format_exe {
		ginger_compile_build_exe hsp_dir, runtime_name
		if stat == false {
			ginger_compile_get_message error
			return false
		}

		ginger_infra_stdout message
		return true
	}

	if s_build_format == build_format_ax {
		ginger_infra_stdout message
		return true
	}

	error = "不明なビルドフォーマット: " + s_build_format
	return false

#global
